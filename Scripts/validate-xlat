#!/bin/bash

       ME=${0##*/}

DIFF_OPTS="-w -U 0"
  VERBOSE=
    QUIET=
      EXT=".xlat"

  CHECKED=0
   FAILED=0
   PASSED=0

 TEMP_DIR=/tmp/$(basename "$0" .sh)

usage() {
    local ret=${1:-0}
    cat <<Usage
Usage: $ME [options] file file dir ...

Check validity of .xlat shell scripts by sourcing the script and then
regenerating it and comparing the copy with the original.  Any difference
indicate something is wrong when reading the script.  It's likely the
problem is related to unicode characters or with backslashes or dollar
signs added to a translated string.

Checks all files given on the command line.  If a directory is given then
check all .xlat files found under that directory.

Options:
    -c --clean    Remove old temp files
    -d --diff     Show diff of files that don't match
    -h --help     Show this help
    -q --quiet    Only print if there is a problem
    -v --verbose  Say more
Usage
    exit $ret
}

main() {

    [ $# -gt 0 ] || usage

    local arg val
    while [ $# -gt 0 -a -z "${1##-*}" ]; do
        arg=${1#-}; shift
        val=${arg#*=}
        case $arg in
             -clean|c)  clean                              ;;
              -diff|d)  SHOW_DIFF=true ; DIFF_OPTS="-w"    ;;
          -diff=*|d=*)  SHOW_DIFF=true ; DIFF_OPTS="$val"  ;;
              -help|h)  usage                              ;;
             -quiet|q)  QUIET=true                         ;;
           -verbose|v)  VERBOSE=true                       ;;
                    -)  break                              ;;
                    *)  error "Unknown argument: -$arg"    ;;
        esac
    done

    [ $# -eq 0 -a -n "$DID_CLEAN" ] && exit 0
    [ $# -gt 0 ] || error "Must give a file or directory"

    [ $UID -eq 0 ] && error "This program must NOT be run as root"

    mkdir -p $TEMP_DIR
    local arg file
    while [ $# -gt 0 ]; do
        arg=$1; shift
        if [ -f $arg ]; then
            validate_xlat $arg

        elif [ -d $arg ]; then
            for file in $(find $arg -type f -name "*$EXT"); do
                validate_xlat $file
            done

        else
            err "Argument $arg is neither a file nor a directory"
        fi
    done

    rmdir $TEMP_DIR
    [ "$QUIET" ] && my_exit $FAILED

    echo
    if [ "$FAILED" -eq 0 ]; then
        echo "${green}Success!$nc_co"
    else
        echo "${err_co}Failure$nc_co"
    fi
    plural $CHECKED "$ME: Checked $num_co%n$nc_co file%s"
    plural $FAILED  "$ME: $num_co%n$nc_co failure%s"
    my_exit $FAILED
}

my_exit() {
    local fail_cnt=$1
    [ $fail_cnt -eq 0 ]
    exit $?
}

validate_xlat() {
    local file=$1

    if [ ! -r $file ]; then
        err "Could not read file $file"
        return
    fi
    if [ $(stat -c %s $file) -eq 0 ]; then
        qsay "Skipping empty file: $file"
        return 0
    fi

    if [ -z "${file##*/ja/*}" -o -z "${file##*/ja_JP/*}" ]; then
        vsay "Skipping Japanese translation: $file"
        return 0
    fi

    local en_file=$(dirname $file)/../en/$(basename $file)
    CHECKED=$((CHECKED + 1))
    if egrep -vq "^_[A-Za-z0-9_]+_=" $file; then
        file_error "Not sourcing suspicious file" "$file"
        FAILED=$((FAILED + 1))
        [ "$QUIET" ] && return 2
        egrep -vn "^_[A-Za-z0-9_]+_=" $file | head -n5
        return 2
    fi

    if egrep -vq '^_[A-Za-z0-9_]+_="([^"]*\")*[^"]*"' $file; then
        file_error "Un-escaped double-quote in" $file
        FAILED=$((FAILED + 1))
        [ "$QUIET" ] && return 3
        egrep -vn '^_[A-Za-z0-9_]+_="([^"]*\")*[^"]*"' $file | head -n5
        return 3
    fi

    if ! test -r $en_file && egrep -q '%[^s0-9]' $file; then
        file_error "Malformed %s in" $file
        FAILED=$((FAILED + 1))
        [ "$QUIET" ] && return 4
        egrep -n '%[^s0-9]'   $file | head -n5
        return 4
    fi

    if test -e $en_file; then
        test_signature $file $en_file || return 5
    fi

    dbsay "Source $file"
    . $file

    local copy1="$(temp_file)" copy2="$(temp_file)"

    dbsay "Read $file and make 2 copies"
    grep "^_[a-zA-Z0-9_]\+_=" $file > $copy1

    while read var_name; do
        eval val=\$$var_name
        val=${val//\"/\\\"}
        printf '%s="%s"\n' $var_name "$val" >> $copy2
    done << Read_Xlat
$(sed -n 's/=.*//p' $file)
Read_Xlat

    # Look at echo "s/\\\\/\\\\\\\\/" to see what this does
    # This allows backslashed backslashes (and backslashed quotes)
    # FIXME: I am confused about what is optimal here
    sed -i -e "s/\\\\/\\\\\\\\/" -e 's/\\"/"/g' $copy2
    #sed -i -e "s/\\\\/\\\\\\\\/" -e 's/\\"/"/g' $copy1
    sed -i 's/\\"/"/g' $copy1 $copy2

    dbsay "Look for difference between copy and original"

    local diff
    if diff=$(diff $DIFF_OPTS $copy1 $copy2 2>/dev/null); then
        PASSED=$((PASSED + 1))
        vsay "Passed: $file"
    else
        FAILED=$((FAILED + 1))
        #echo "Failed copy test: $file" >&2
        file_error "Failed copy test" "$file"
        if [ "$QUET" ]; then
            :
        elif [ "$SHOW_DIFF" ]; then
            echo $diff
        else
            echo "$diff" | sed -n 's/^-_/  _/p'
        fi
    fi

    rm $copy1 $copy2
}

test_signature() {
    local file=$1 en_file=$2 #sig1=$(temp_file) sig2=$(temp_file)

    local sig=/tmp/validate-xlat/sig
    local sig_en=/tmp/validate-xlat/sig_en

    sed -r -e 's/[^%]*(%[0-9-]*[sn]?)[^%]*/\1/g' -e 's/^[^%]+$//' $file    > $sig
    sed -r -e 's/[^%]*(%[0-9-]*[sn]?)[^%]*/\1/g' -e 's/^[^%]+$//' $en_file > $sig_en

    local lines=$(diff --unchanged-line-format="" --old-line-format="" --new-line-format="%dn|" $sig_en $sig)
    if [ -z "$lines" ]; then
        rm $sig $sig_en
        return 0
    fi

    echo
    file_error "Bad \"%s\" signature(s) in" $file
    FAILED=$((FAILED + 1))
    #[ "$QUIET" ] && return 5
    lines=${lines%|}
    grep -n ^ $file | egrep "^($lines):"
    rm $sig $sig_en
}

temp_file() {
    local file=$(mktemp $TEMP_DIR/XXXXXXXX)
    [ -z "$file" -o ! -e "$file" ] && error "Unable to make temparary file"
    echo $file
}

set_colors() {
    local noco=$1  loco=$2

    [ "$noco" ] && return

    local e=$(printf "\e")
     black="$e[0;30m";    blue="$e[0;34m";    green="$e[0;32m";    cyan="$e[0;36m";
       red="$e[0;31m";  purple="$e[0;35m";    brown="$e[0;33m"; lt_gray="$e[0;37m";
   dk_gray="$e[1;30m"; lt_blue="$e[1;34m"; lt_green="$e[1;32m"; lt_cyan="$e[1;36m";
    lt_red="$e[1;31m"; magenta="$e[1;35m";   yellow="$e[1;33m";   white="$e[1;37m";
     nc_co="$e[0m";

    cheat_co=$white;      err_co=$red;       hi_co=$white;
      cmd_co=$white;     from_co=$lt_green;  mp_co=$magenta;   num_co=$magenta;
      dev_co=$magenta;   head_co=$yellow;     m_co=$lt_cyan;    ok_co=$lt_green;
       to_co=$lt_green;  warn_co=$yellow;  bold_co=$yellow;

    [ "$loco" ] || return

    from_co=$brown
      hi_co=$white
       m_co=$nc_co
     num_co=$white
}

plural() {
    local n="$1"  str="$2"
    case $n in
        1) local s=  ies=y   are=is  have=has  were=was;;
        *) local s=s ies=ies are=are have=have were=were;;
    esac
    echo "$str" | sed -e "s/%s/$s/g" -e "s/%ies/$ies/g" -e "s/%are/$are/g" \
        -e "s/%have/$have/" -e "s/%n/$n/g" -e "s/%were/$were/g"
}

clean() {
    rm -f $(find $TEMP_DIR -type f)
    DID_CLEAN=true
}

qsay() {
    [ "$QUIET" ] || echo "$@"
}

dbsay() {
    [ "$DEBUG" ] && echo "$@"
}

vsay() {
    [ "$QUIET"   ] && return
    [ "$VERBOSE" ] && echo "$@"
}

error() {
    err "$@"
    exit 2
}

err() {
    local msg=$(echo "$*" | sed -r "s=/([a-z][a-z])/=/$bold_co\1$err_co/=")
    echo -e "$bold_co$ME:$err_co $msg$nc_co" >&2
}

file_error() {
    local msg=$1  file=$2
    file=$(echo $file | sed -r "s=.*([a-z][-a-z](_[A-Z][A-Z])?)(/[^/]+\.xlat)$=$bold_co\1$err_co\3=")
    echo -e "${err_co}$msg: $file$nc_co" >&2
}

set_colors
main "$@"
